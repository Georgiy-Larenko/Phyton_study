# Задача 1. Вычислить число π c заданной точностью d

# *Пример:*

# - при  d = 0.001, π = 3.141     10^{-1} ≤ d ≤10^{-10}

# d = int(input("Введите точность числа π: "))
# x = 0
# count = 1

# for count in range (1, 100000):
#     x = x + 4 * ((-1) ** (count + 1)) / (2 * count - 1)
# print(round(x, d))



# Или



# from math import pi

# d = int(input("Введите точность числа π: "))
# print(round(pi, d))





# Задача 2. Задайте натуральное число N. Напишите программу, которая составит список простых множителей числа N.

# *Пример*

# - при N = 236 -> [2, 2, 59]

# n = int(input("input N: "))


# def mults(n):
#     lst = []
#     i = 2

#     while i * i <= n:
#         if n % i == 0:
#             lst.append(i)
#             n //= i
#         else:
#             i += 1
#     if n > 1:
#         lst.append(n)    
#     return lst


# print(mults(n))






# Задача 3. Задайте последовательность чисел. Напишите программу, которая выведет список неповторяющихся элементов исходной последовательности.

# *Пример*

# - при [1, 1, 2, 3, 3, 4, 1, 5, 7, 8, 8, 7, 9]  ->   [2, 4, 5, 9]

lst = [1, 1, 2, 3, 3, 4, 1, 5, 7, 8, 8, 7, 9]


# def get_unique(lst):
#     res_lst = []
#     for num in lst:
#         if num not in res_lst:
#             res_lst.append(num)
#     return res_lst



# Или 



# print(get_unique(lst))

def get_unique(lst):
    res_lst  = []
    for i in lst:
        if lst.count(i) == 1:
            res_lst.append(i)
    return res_lst

print(get_unique(lst))





# Задача 4. Задана натуральная степень k. Сформировать случайным образом список коэффициентов (значения от 0 до 100) многочлена и записать в файл многочлен степени k.

# *Пример:*

# - k = 2 => 2*x² + 4*x + 5 = 0 или x² + 5 = 0 или 10*x² = 0





# Задача 5. Даны два файла, в каждом из которых находится запись многочлена. Задача - сформировать файл, содержащий сумму многочленов.
# Коэффициенты могут быть как положительными, так и отрицательными. Степени многочленов могут отличаться.
